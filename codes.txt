//bst

#include <iostream>
#include <stack>
using namespace std;

class Node {
public:
    int data;
    Node* left;
    Node* right;

    Node(int value) {
        data = value;
        left = right = NULL;
    }
};

class BST {
public:
    Node* root;

    BST() {
        root = NULL;
    }

    // INSERTION
    Node* insert(Node* root, int value) {
        if (root == NULL)
            return new Node(value);
        if (value < root->data)
            root->left = insert(root->left, value);
        else
            root->right = insert(root->right, value);
        return root;
    }

    // RECURSIVE TRAVERSALS
    void inorderRecursive(Node* root) {
        if (root != NULL) {
            inorderRecursive(root->left);
            cout << root->data << " ";
            inorderRecursive(root->right);
        }
    }

    void preorderRecursive(Node* root) {
        if (root != NULL) {
            cout << root->data << " ";
            preorderRecursive(root->left);
            preorderRecursive(root->right);
        }
    }

    void postorderRecursive(Node* root) {
        if (root != NULL) {
            postorderRecursive(root->left);
            postorderRecursive(root->right);
            cout << root->data << " ";
        }
    }

    // NON-RECURSIVE TRAVERSALS
    void inorderNonRecursive(Node* root) {
        stack<Node*> s;
        Node* current = root;
        while (current != NULL || !s.empty()) {
            while (current != NULL) {
                s.push(current);
                current = current->left;
            }
            current = s.top(); s.pop();
            cout << current->data << " ";
            current = current->right;
        }
    }

    void preorderNonRecursive(Node* root) {
        if (root == NULL) return;
        stack<Node*> s;
        s.push(root);
        while (!s.empty()) {
            Node* current = s.top(); s.pop();
            cout << current->data << " ";
            if (current->right) s.push(current->right);
            if (current->left) s.push(current->left);
        }
    }

    void postorderNonRecursive(Node* root) {
        if (root == NULL) return;
        stack<Node*> s1, s2;
        s1.push(root);
        while (!s1.empty()) {
            Node* current = s1.top(); s1.pop();
            s2.push(current);
            if (current->left) s1.push(current->left);
            if (current->right) s1.push(current->right);
        }
        while (!s2.empty()) {
            cout << s2.top()->data << " ";
            s2.pop();
        }
    }
};

int main() {
    BST tree;
    int n, val;
    cout << "Enter number of nodes: ";
    cin >> n;
    cout << "Enter values:\n";
    for (int i = 0; i < n; i++) {
        cin >> val;
        tree.root = tree.insert(tree.root, val);
    }

    cout << "\nRecursive Inorder: "; tree.inorderRecursive(tree.root);
    cout << "\nRecursive Preorder: "; tree.preorderRecursive(tree.root);
    cout << "\nRecursive Postorder: "; tree.postorderRecursive(tree.root);

    cout << "\n\nNon-Recursive Inorder: "; tree.inorderNonRecursive(tree.root);
    cout << "\nNon-Recursive Preorder: "; tree.preorderNonRecursive(tree.root);
    cout << "\nNon-Recursive Postorder: "; tree.postorderNonRecursive(tree.root);

    return 0;
}










//avl
#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* left;
    Node* right;
    int height;

    Node(int val) {
        data = val;
        left = right = nullptr;
        height = 1; // Initial height of node is 1
    }
};

class AVLTree {
public:
    Node* root;

    AVLTree() {
        root = nullptr;
    }

    // Utility function to get the height of a node
    int height(Node* node) {
        if (node == nullptr)
            return 0;
        return node->height;
    }

    // Utility function to get the balance factor of a node
    int getBalanceFactor(Node* node) {
        if (node == nullptr)
            return 0;
        return height(node->left) - height(node->right);
    }

    // Right rotate the subtree rooted with y
    Node* rightRotate(Node* y) {
        Node* x = y->left;
        Node* T2 = x->right;

        // Perform rotation
        x->right = y;
        y->left = T2;

        // Update heights
        y->height = max(height(y->left), height(y->right)) + 1;
        x->height = max(height(x->left), height(x->right)) + 1;

        // Return new root
        return x;
    }

    // Left rotate the subtree rooted with x
    Node* leftRotate(Node* x) {
        Node* y = x->right;
        Node* T2 = y->left;

        // Perform rotation
        y->left = x;
        x->right = T2;

        // Update heights
        x->height = max(height(x->left), height(x->right)) + 1;
        y->height = max(height(y->left), height(y->right)) + 1;

        // Return new root
        return y;
    }

    // Insert a new node
    Node* insert(Node* node, int value) {
        // Step 1: Perform normal BST insert
        if (node == nullptr)
            return new Node(value);

        if (value < node->data)
            node->left = insert(node->left, value);
        else if (value > node->data)
            node->right = insert(node->right, value);
        else
            return node;

        // Step 2: Update height of this ancestor node
        node->height = 1 + max(height(node->left), height(node->right));

        // Step 3: Get the balance factor of this node
        int balance = getBalanceFactor(node);

        // Step 4: If the node becomes unbalanced, then perform rotations
        // Left Left case
        if (balance > 1 && value < node->left->data)
            return rightRotate(node);

        // Right Right case
        if (balance < -1 && value > node->right->data)
            return leftRotate(node);

        // Left Right case
        if (balance > 1 && value > node->left->data) {
            node->left = leftRotate(node->left);
            return rightRotate(node);
        }

        // Right Left case
        if (balance < -1 && value < node->right->data) {
            node->right = rightRotate(node->right);
            return leftRotate(node);
        }

        return node;
    }

    // Recursive Inorder Traversal
    void inorderRecursive(Node* root) {
        if (root == nullptr)
            return;
        inorderRecursive(root->left);
        cout << root->data << " ";
        inorderRecursive(root->right);
    }

    // Recursive Preorder Traversal
    void preorderRecursive(Node* root) {
        if (root == nullptr)
            return;
        cout << root->data << " ";
        preorderRecursive(root->left);
        preorderRecursive(root->right);
    }

    // Recursive Postorder Traversal
    void postorderRecursive(Node* root) {
        if (root == nullptr)
            return;
        postorderRecursive(root->left);
        postorderRecursive(root->right);
        cout << root->data << " ";
    }

    // Non-Recursive Inorder Traversal
    void inorderNonRecursive(Node* root) {
        Node* current = root;
        while (current != nullptr) {
            if (current->left == nullptr) {
                cout << current->data << " ";
                current = current->right;
            } else {
                Node* pre = current->left;
                while (pre->right != nullptr && pre->right != current)
                    pre = pre->right;
                if (pre->right == nullptr) {
                    pre->right = current;
                    current = current->left;
                } else {
                    pre->right = nullptr;
                    cout << current->data << " ";
                    current = current->right;
                }
            }
        }
    }

    // Non-Recursive Preorder Traversal
    void preorderNonRecursive(Node* root) {
        if (root == nullptr) return;
        stack<Node*> s;
        s.push(root);
        while (!s.empty()) {
            Node* node = s.top();
            s.pop();
            cout << node->data << " ";
            if (node->right)
                s.push(node->right);
            if (node->left)
                s.push(node->left);
        }
    }

    // Non-Recursive Postorder Traversal (using two stacks)
    void postorderNonRecursive(Node* root) {
        if (root == nullptr) return;
        stack<Node*> s1, s2;
        s1.push(root);
        while (!s1.empty()) {
            Node* node = s1.top();
            s1.pop();
            s2.push(node);
            if (node->left) s1.push(node->left);
            if (node->right) s1.push(node->right);
        }
        while (!s2.empty()) {
            cout << s2.top()->data << " ";
            s2.pop();
        }
    }
};

int main() {
    AVLTree tree;
    int n, value;
    cout << "Enter number of nodes: ";
    cin >> n;
    cout << "Enter values:\n";
    for (int i = 0; i < n; i++) {
        cin >> value;
        tree.root = tree.insert(tree.root, value);
    }

    cout << "\nRecursive Inorder: "; tree.inorderRecursive(tree.root);
    cout << "\nRecursive Preorder: "; tree.preorderRecursive(tree.root);
    cout << "\nRecursive Postorder: "; tree.postorderRecursive(tree.root);

    cout << "\n\nNon-Recursive Inorder: "; tree.inorderNonRecursive(tree.root);
    cout << "\nNon-Recursive Preorder: "; tree.preorderNonRecursive(tree.root);
    cout << "\nNon-Recursive Postorder: "; tree.postorderNonRecursive(tree.root);

    return 0;
}












bloom filter
#include <iostream>
#include <string>

using namespace std;

const int SIZE = 20; // Size of the array (bit array size)

class BloomFilter {
private:
    int bits[SIZE]; // Using a simple int array for bit representation

    // 3 simple hash functions using the first character of the string
    int hash1(const string& key) {
        return key.empty() ? 0 : int(key[0]) % SIZE;
    }

    int hash2(const string& key) {
        return key.empty() ? 0 : (int(key[0]) + 3) % SIZE;
    }

    int hash3(const string& key) {
        return key.empty() ? 0 : (int(key[0]) * 5) % SIZE;
    }

public:
    // Constructor to initialize all bits to 0
    BloomFilter() {
        for (int i = 0; i < SIZE; ++i) {
            bits[i] = 0; // Initialize all bits to 0
        }
    }

    // Insert item into the Bloom Filter
    void insert(const string& item) {
        bits[hash1(item)] = 1;
        bits[hash2(item)] = 1;
        bits[hash3(item)] = 1;
    }

    // Check if the item might be in the set
    bool possiblyContains(const string& item) {
        return bits[hash1(item)] && 
               bits[hash2(item)] && 
               bits[hash3(item)];
    }

    // Display the current bit array (for debugging)
    void printBits() {
        cout << "Bit array: ";
        for (int i = 0; i < SIZE; ++i) {
            cout << bits[i] << " ";
        }
        cout << endl;
    }
};

int main() {
    BloomFilter bf;

    bf.insert("apple");
    bf.insert("banana");
    bf.insert("orange");

    bf.printBits(); // Display the bit array

    cout << "Check 'apple': " << (bf.possiblyContains("apple") ? "Maybe" : "No") << endl;
    cout << "Check 'banana': " << (bf.possiblyContains("banana") ? "Maybe" : "No") << endl;
    cout << "Check 'grape': " << (bf.possiblyContains("grape") ? "Maybe" : "No") << endl;

    return 0;
}















count min sketch
#include <iostream>
#include <string>
#include <climits>

using namespace std;

const int WIDTH = 10;
const int DEPTH = 3;

class CountMinSketch {
private:
    int table[DEPTH][WIDTH];

    // 3 simple hash functions using first character
        int hash1(const string& key) {
        if (key.empty()) return 0;
        return int(key[0]) % WIDTH;
    }

    int hash2(const string& key) {
        if (key.empty()) return 0;
        return (int(key[0]) + 2) % WIDTH;
    }

    int hash3(const string& key) {
        if (key.empty()) return 0;
        return (int(key[0]) * 4) % WIDTH;
    }

public:
    CountMinSketch() {
        // Initialize the table with zeros
        for (int i = 0; i < DEPTH; ++i)
            for (int j = 0; j < WIDTH; ++j)
                table[i][j] = 0;
    }

    // Add count to the item
    void update(const string& item, int count = 1) {
        table[0][hash1(item)] += count;
        table[1][hash2(item)] += count;
        table[2][hash3(item)] += count;
    }

    // Estimate the count of an item
    int estimate(const string& item) {
        int c1 = table[0][hash1(item)];
        int c2 = table[1][hash2(item)];
        int c3 = table[2][hash3(item)];

        return min(c1, min(c2, c3));
    }
};

int main() {
    CountMinSketch cms;

    cms.update("apple");
    cms.update("apple");
    cms.update("banana");
    cms.update("apple");
    cms.update("orange");
    cms.update("banana");
     cms.update("orange");
      cms.update("orange");
       cms.update("orange");

    cout << "Estimated count for 'apple': " << cms.estimate("apple") << endl;
    cout << "Estimated count for 'banana': " << cms.estimate("banana") << endl;
    cout << "Estimated count for 'orange': " << cms.estimate("orange") << endl;
    cout << "Estimated count for 'grape': " << cms.estimate("grape") << endl;

    return 0;
}



















dmart example
#include <iostream>
#include <queue>
#include <stack>
using namespace std;

// Node banate hain
struct Node {
    int data;
    Node* left;
    Node* right;
};

// Naya node create karne ka function
Node* createNode(int data) {
    Node* newNode = new Node();
    newNode->data = data;
    newNode->left = newNode->right = NULL;
    return newNode;
}

// Insert function (BST mein insert karna)
Node* insert(Node* root, int data) {
    if (root == NULL)
        return createNode(data);
    if (data < root->data)
        root->left = insert(root->left, data);
    else if (data > root->data)
        root->right = insert(root->right, data);
    return root;
}

// Level Order Traversal (Breadth First)
void levelOrder(Node* root) {
    if (root == NULL) return;

    queue<Node*> q;
    q.push(root);

    cout << "Level-wise traversal: ";
    while (!q.empty()) {
        Node* temp = q.front();
        q.pop();
        cout << temp->data << " ";
        if (temp->left) q.push(temp->left);
        if (temp->right) q.push(temp->right);
    }
    cout << endl;
}

// Non-recursive Preorder traversal
void preOrderNonRecursive(Node* root) {
    if (root == NULL) return;

    stack<Node*> st;
    st.push(root);

    cout << "Pre-order traversal (non-recursive): ";
    while (!st.empty()) {
        Node* curr = st.top();
        st.pop();
        cout << curr->data << " ";

        if (curr->right) st.push(curr->right);
        if (curr->left) st.push(curr->left);
    }
    cout << endl;
}

int main() {
    Node* root = NULL;
    int choice, id;

    do {
        cout << "\n1. Insert Employee ID\n2. Display Level-wise\n3. Pre-order (Non-recursive)\n4. Exit\n";
        cout << "Enter choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter ID: ";
                cin >> id;
                root = insert(root, id);
                break;
            case 2:
                levelOrder(root);
                break;
            case 3:
                preOrderNonRecursive(root);
                break;
            case 4:
                cout << "Exiting...\n";
                break;
            default:
                cout << "Invalid!\n";
        }
    } while (choice != 4);

    return 0;
}


















example tbt 
#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node *left, *right;
    bool lthread, rthread; // True if left or right pointer is a thread

    Node(int val) {
        data = val;
        left = right = NULL;
        lthread = rthread = true;
    }
};

class ThreadedBinaryTree {
private:
    Node *root;

public:
    ThreadedBinaryTree() {
        root = NULL;
    }

    void insert(int key) {
        Node *ptr = root;
        Node *par = NULL;

        while (ptr != NULL) {
            if (key == ptr->data) {
                cout << "Duplicate key!\n";
                return;
            }

            par = ptr;

            if (key < ptr->data) {
                if (!ptr->lthread)
                    ptr = ptr->left;
                else
                    break;
            } else {
                if (!ptr->rthread)
                    ptr = ptr->right;
                else
                    break;
            }
        }

        Node *newNode = new Node(key);

        if (par == NULL) {
            root = newNode;
        } else if (key < par->data) {
            newNode->left = par->left;
            newNode->right = par;
            par->lthread = false;
            par->left = newNode;
        } else {
            newNode->right = par->right;
            newNode->left = par;
            par->rthread = false;
            par->right = newNode;
        }
    }

    void inorder() {
        Node *curr = root;

        // Go to the leftmost node
        while (curr && !curr->lthread)
            curr = curr->left;

        while (curr != NULL) {
            cout << curr->data << " ";

            // If rthread is true, go to inorder successor
            if (curr->rthread)
                curr = curr->right;
            else {
                curr = curr->right;
                while (curr && !curr->lthread)
                    curr = curr->left;
            }
        }
    }
};

int main() {
    ThreadedBinaryTree tbt;

    int n, val;
    cout << "Enter number of sensor data points: ";
    cin >> n;

    cout << "Enter data values:\n";
    for (int i = 0; i < n; ++i) {
        cin >> val;
        tbt.insert(val);
    }

    cout << "In-order traversal without recursion or stack:\n";
    tbt.inorder();

    return 0;
}


















example
#include <iostream>
using namespace std;

// Define the structure for a student node in the BST
class Node {
public:
    int rollNo; // Student's roll number
    Node* left;
    Node* right;

    // Constructor to initialize node with roll number
    Node(int value) {
        rollNo = value;
        left = right = nullptr;
    }
};

// Class to manage the BST operations
class BST {
public:
    Node* root;

    BST() {
        root = nullptr;
    }

    // Function to insert a new student (roll number) into the BST
    Node* insert(Node* root, int rollNo) {
        if (root == nullptr) {
            return new Node(rollNo);
        }

        // If rollNo is less than root's rollNo, insert it into the left subtree
        if (rollNo < root->rollNo) {
            root->left = insert(root->left, rollNo);
        }
        // If rollNo is greater, insert it into the right subtree
        else if (rollNo > root->rollNo) {
            root->right = insert(root->right, rollNo);
        }

        return root;  // Return the (unchanged) node pointer
    }

    // Function to search for a student's roll number
    bool search(Node* root, int rollNo) {
        // Base case: root is null or rollNo is present at the root
        if (root == nullptr) {
            return false;
        }
        if (root->rollNo == rollNo) {
            return true;
        }

        // If rollNo is smaller, search in the left subtree
        if (rollNo < root->rollNo) {
            return search(root->left, rollNo);
        }

        // Else search in the right subtree
        return search(root->right, rollNo);
    }

    // Function to find the node with the minimum roll number (for deletion purposes)
    Node* minNode(Node* root) {
        Node* current = root;
        while (current && current->left != nullptr) {
            current = current->left;
        }
        return current;
    }

    // Function to delete a student (roll number) from the BST
    Node* deleteNode(Node* root, int rollNo) {
        if (root == nullptr) return root;

        // If rollNo is smaller, search in the left subtree
        if (rollNo < root->rollNo) {
            root->left = deleteNode(root->left, rollNo);
        }
        // If rollNo is greater, search in the right subtree
        else if (rollNo > root->rollNo) {
            root->right = deleteNode(root->right, rollNo);
        }
        // If rollNo is same as root's rollNo, then this is the node to be deleted
        else {
            // Node with only one child or no child
            if (root->left == nullptr) {
                Node* temp = root->right;
                delete root;
                return temp;
            } else if (root->right == nullptr) {
                Node* temp = root->left;
                delete root;
                return temp;
            }

            // Node with two children: Get the inorder successor (smallest in the right subtree)
            Node* temp = minNode(root->right);

            // Copy the inorder successor's content to this node
            root->rollNo = temp->rollNo;

            // Delete the inorder successor
            root->right = deleteNode(root->right, temp->rollNo);
        }

        return root;
    }

    // Function to handle insertion
    void insert(int rollNo) {
        root = insert(root, rollNo);
    }

    // Function to search a student
    bool search(int rollNo) {
        return search(root, rollNo);
    }

    // Function to delete a student
    void deleteStudent(int rollNo) {
        root = deleteNode(root, rollNo);
    }
};

// Main driver function
int main() {
    BST bst;
    int rollNo, choice;

    // Initially adding 15 students (for example roll numbers from 1 to 15)
    for (int i = 1; i <= 15; ++i) {
        bst.insert(i);
    }

    cout << "SY Minor Project Panel Group\n";
    cout << "1. Search for a roll number\n";
    cout << "2. Change panel group (delete student)\n";
    cout << "3. Exit\n";

    do {
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter roll number to search: ";
                cin >> rollNo;
                if (bst.search(rollNo)) {
                    cout << "Roll number " << rollNo << " is in the panel group.\n";
                } else {
                    cout << "Roll number " << rollNo << " is not found.\n";
                }
                break;

            case 2:
                cout << "Enter roll number of the student who changed the panel group: ";
                cin >> rollNo;
                bst.deleteStudent(rollNo);
                cout << "Roll number " << rollNo << " has been removed from the panel group.\n";
                break;

            case 3:
                cout << "Exiting...\n";
                break;

            default:
                cout << "Invalid choice. Please try again.\n";
        }
    } while (choice != 3);

    return 0;
}

















heap sort
#include <iostream>
using namespace std;

void swap(int &a, int &b) {
    int temp = a;
    a = b;
    b = temp;
}

// Make Max Heap (for Ascending sort)
void heapifyMax(int arr[], int n, int i) {
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < n && arr[left] > arr[largest])
        largest = left;

    if (right < n && arr[right] > arr[largest])
        largest = right;

    if (largest != i) {
        swap(arr[i], arr[largest]);
        heapifyMax(arr, n, largest); // repeat on changed child
    }
}

// Make Min Heap (for Descending sort)
void heapifyMin(int arr[], int n, int i) {
    int smallest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < n && arr[left] < arr[smallest])
        smallest = left;

    if (right < n && arr[right] < arr[smallest])
        smallest = right;

    if (smallest != i) {
        swap(arr[i], arr[smallest]);
        heapifyMin(arr, n, smallest);
    }
}

// Heap Sort - Ascending Order
void heapSortAscending(int arr[], int n) {
    // Build max heap
    for (int i = n / 2 - 1; i >= 0; i--)
        heapifyMax(arr, n, i);

    // Extract elements one by one
    for (int i = n - 1; i > 0; i--) {
        swap(arr[0], arr[i]);
        heapifyMax(arr, i, 0); // reduce heap size
    }
}

// Heap Sort - Descending Order
void heapSortDescending(int arr[], int n) {
    // Build min heap
    for (int i = n / 2 - 1; i >= 0; i--)
        heapifyMin(arr, n, i);

    // Extract elements
    for (int i = n - 1; i > 0; i--) {
        swap(arr[0], arr[i]);
        heapifyMin(arr, i, 0);
    }
}

// Print the array
void printArray(int arr[], int n) {
    for (int i = 0; i < n; i++)
        cout << arr[i] << " ";
    cout << endl;
}

int main() {
    int arr[100], n;

    cout << "Enter number of elements: ";
    cin >> n;

    cout << "Enter " << n << " elements:\n";
    for (int i = 0; i < n; i++)
        cin >> arr[i];

    // Ascending
    int asc[100];
    for (int i = 0; i < n; i++) asc[i] = arr[i];
    heapSortAscending(asc, n);
    cout << "Sorted in Ascending Order:\n";
    printArray(asc, n);

    // Descending
    int desc[100];
    for (int i = 0; i < n; i++) desc[i] = arr[i];
    heapSortDescending(desc, n);
    cout << "Sorted in Descending Order:\n";
    printArray(desc, n);

    return 0;
}






















Kruskal

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

#define V 5 // Number of vertices

// Structure to represent an edge in the graph
struct Edge {
    int src, dest, weight;
};

// Comparator function to sort edges based on their weight
bool compare(Edge e1, Edge e2) {
    return e1.weight < e2.weight;
}

// Find function using path compression
int find(int parent[], int i) {
    if (parent[i] == -1) {
        return i;
    }
    return find(parent, parent[i]);
}

// Union function to join two sets
void unionSet(int parent[], int x, int y) {
    int xroot = find(parent, x);
    int yroot = find(parent, y);
    parent[xroot] = yroot;
}

// Function to implement Kruskal's algorithm
void kruskalMST(vector<Edge>& edges) {
    sort(edges.begin(), edges.end(), compare); // Sort edges by weight

    int parent[V];
    for (int i = 0; i < V; i++) {
        parent[i] = -1;
    }

    vector<Edge> mst; // Store the MST

    // Iterate through all the edges
    for (auto edge : edges) {
        int x = find(parent, edge.src);
        int y = find(parent, edge.dest);

        // If including this edge doesn't cause a cycle, include it in the MST
        if (x != y) {
            mst.push_back(edge);
            unionSet(parent, x, y);
        }
    }

    // Print the MST
    for (auto edge : mst) {
        cout << edge.src << " - " << edge.dest << " : " << edge.weight << endl;
    }
}

int main() {
    vector<Edge> edges = {
        {0, 1, 2}, {0, 3, 6}, {1, 2, 3},
        {1, 3, 8}, {1, 4, 5}, {2, 4, 7},
        {3, 4, 9}
    };

    kruskalMST(edges);

    return 0;
}




















prims 
#include <iostream>
using namespace std;

void swap(int &a, int &b) {
    int temp = a;
    a = b;
    b = temp;
}

// Make Max Heap (for Ascending sort)
void heapifyMax(int arr[], int n, int i) {
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < n && arr[left] > arr[largest])
        largest = left;

    if (right < n && arr[right] > arr[largest])
        largest = right;

    if (largest != i) {
        swap(arr[i], arr[largest]);
        heapifyMax(arr, n, largest); // repeat on changed child
    }
}

// Make Min Heap (for Descending sort)
void heapifyMin(int arr[], int n, int i) {
    int smallest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < n && arr[left] < arr[smallest])
        smallest = left;

    if (right < n && arr[right] < arr[smallest])
        smallest = right;

    if (smallest != i) {
        swap(arr[i], arr[smallest]);
        heapifyMin(arr, n, smallest);
    }
}

// Heap Sort - Ascending Order
void heapSortAscending(int arr[], int n) {
    // Build max heap
    for (int i = n / 2 - 1; i >= 0; i--)
        heapifyMax(arr, n, i);

    // Extract elements one by one
    for (int i = n - 1; i > 0; i--) {
        swap(arr[0], arr[i]);
        heapifyMax(arr, i, 0); // reduce heap size
    }
}

// Heap Sort - Descending Order
void heapSortDescending(int arr[], int n) {
    // Build min heap
    for (int i = n / 2 - 1; i >= 0; i--)
        heapifyMin(arr, n, i);

    // Extract elements
    for (int i = n - 1; i > 0; i--) {
        swap(arr[0], arr[i]);
        heapifyMin(arr, i, 0);
    }
}

// Print the array
void printArray(int arr[], int n) {
    for (int i = 0; i < n; i++)
        cout << arr[i] << " ";
    cout << endl;
}

int main() {
    int arr[100], n;

    cout << "Enter number of elements: ";
    cin >> n;

    cout << "Enter " << n << " elements:\n";
    for (int i = 0; i < n; i++)
        cin >> arr[i];

    // Ascending
    int asc[100];
    for (int i = 0; i < n; i++) asc[i] = arr[i];
    heapSortAscending(asc, n);
    cout << "Sorted in Ascending Order:\n";
    printArray(asc, n);

    // Descending
    int desc[100];
    for (int i = 0; i < n; i++) desc[i] = arr[i];
    heapSortDescending(desc, n);
    cout << "Sorted in Descending Order:\n";
    printArray(desc, n);

    return 0;
}






















//tbt
#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* left;
    Node* right;
    bool leftThread;  // If leftThread is true, left is a thread pointer
    bool rightThread; // If rightThread is true, right is a thread pointer

    Node(int value) {
        data = value;
        left = right = nullptr;
        leftThread = rightThread = false;
    }
};

class TBT {
public:
    Node* root;

    TBT() {
        root = nullptr;
    }

    // Insertion in TBT
    Node* insert(Node* root, int value) {
        if (root == nullptr)
            return new Node(value);

        if (value < root->data) {
            if (!root->leftThread)
                root->left = insert(root->left, value);
            else
                root->left = new Node(value);
        } else {
            if (!root->rightThread)
                root->right = insert(root->right, value);
            else
                root->right = new Node(value);
        }
        return root;
    }

    // Recursive Inorder Traversal
    void inorderRecursive(Node* root) {
        if (root == nullptr)
            return;
        inorderRecursive(root->left);
        cout << root->data << " ";
        inorderRecursive(root->right);
    }

    // Recursive Preorder Traversal
    void preorderRecursive(Node* root) {
        if (root == nullptr)
            return;
        cout << root->data << " ";
        preorderRecursive(root->left);
        preorderRecursive(root->right);
    }

    // Recursive Postorder Traversal
    void postorderRecursive(Node* root) {
        if (root == nullptr)
            return;
        postorderRecursive(root->left);
        postorderRecursive(root->right);
        cout << root->data << " ";
    }

    // Non-Recursive Inorder Traversal
    void inorderNonRecursive(Node* root) {
        Node* current = root;
        while (current != nullptr) {
            if (!current->leftThread) {
                current = current->left;
            } else {
                cout << current->data << " ";
                current = current->right;
            }
        }
    }

    // Non-Recursive Preorder Traversal
    void preorderNonRecursive(Node* root) {
        Node* current = root;
        while (current != nullptr) {
            cout << current->data << " ";
            if (!current->leftThread)
                current = current->left;
            else if (!current->rightThread)
                current = current->right;
        }
    }

    // Non-Recursive Postorder Traversal (using two stacks or another method)
    void postorderNonRecursive(Node* root) {
        // This is a complex method and requires handling the child nodes separately.
        // Since TBT is specifically for inorder and preorder traversals, we won't implement postorder non-recursive here.
    }
};

int main() {
    TBT tree;
    int n, value;
    cout << "Enter number of nodes: ";
    cin >> n;
    cout << "Enter values:\n";
    for (int i = 0; i < n; i++) {
        cin >> value;
        tree.root = tree.insert(tree.root, value);
    }

    cout << "\nRecursive Inorder: "; tree.inorderRecursive(tree.root);
    cout << "\nRecursive Preorder: "; tree.preorderRecursive(tree.root);
    cout << "\nRecursive Postorder: "; tree.postorderRecursive(tree.root);

    cout << "\n\nNon-Recursive Inorder: "; tree.inorderNonRecursive(tree.root);
    cout << "\nNon-Recursive Preorder: "; tree.preorderNonRecursive(tree.root);

    return 0;
}



